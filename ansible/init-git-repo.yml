---
- name: Crear Repositorio en GitHub e Integrar con AAP
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # ------------- CONFIGURACIÓN DEL USUARIO -------------
    # Cambia estos valores según tus necesidades.
    github_user: "lboubeta"
    source_repo_url: "https://github.com/lboubeta/summit25-cac-template.git"
    new_repo_name: "cac-test-repo"
    new_repo_description: "Repositorio creado y sincronizado por Ansible para AAP."
    webhook_url: "https://summit25-aap.apps.cluster-bktlg.dynamic.redhatworkshops.io/api/controller/v2/job_templates/16/github/"
    webhook_key: "mfMK6Ev91QeHLS1xkn0WVQCnQOzSnk1kIglP1kRaGARjFrSMEv"

    # ------------- CONFIGURACIÓN DE AAP -------------
    aap_organization: "CaC"
    aap_inventory_name: "CaC Inventory" # Asegúrate de que este inventario exista en tu AAP.
    aap_playbook_name: "hello_world.yml" # El playbook a ejecutar desde el repositorio clonado.
    # ----------------------------------------------------

    # --- Variables generadas (no es necesario cambiarlas) ---
    local_clone_path: "/tmp/ansible_clone_{{ new_repo_name }}"
    aap_project_name: "{{ new_repo_name }}"
    aap_scm_credential_name: "Credencial Git - {{ new_repo_name }}"
    # --------------------------------------------------------

  tasks:
    - name: "Paso 1: Crear un nuevo repositorio privado en GitHub"
      community.general.github_repo:
        access_token: "{{ github_token }}"
        name: "{{ new_repo_name }}"
        description: "{{ new_repo_description }}"
        private: false
        state: present
        force_defaults: false
      register: github_repo_creation

    - name: "Paso 2: Asegurar que el directorio de clonación temporal no existe"
      ansible.builtin.file:
        path: "{{ local_clone_path }}"
        state: absent

    - name: "Paso 3: Clonar el repositorio de origen en modo 'bare'"
      ansible.builtin.git:
        repo: "{{ source_repo_url }}"
        dest: "{{ local_clone_path }}"
        bare: true
      when: not lookup('ansible.builtin.file', local_clone_path, get_attributes=True).exists

    - name: "Paso 4: Empujar el contenido clonado al nuevo repositorio (modo espejo)"
      ansible.builtin.shell:
        cmd: "git push --mirror https://{{ github_token }}@github.com/{{ github_user }}/{{ new_repo_name }}.git"
        chdir: "{{ local_clone_path }}"

    - name: "Paso 5: Limpiar el directorio de clonación temporal"
      ansible.builtin.file:
        path: "{{ local_clone_path }}"
        state: absent

    - name: "Paso 6: Crear Credencial SCM para el nuevo repositorio privado en AAP"
      ansible.controller.credential:
        name: "{{ aap_scm_credential_name }}"
        organization: "{{ aap_organization }}"
        credential_type: "Source Control"
        inputs:
          username: "{{ github_user }}"
          password: "{{ github_token }}"
        state: present
        validate_certs: false
      register: scm_credential

    - name: "Paso 7: Crear un nuevo Proyecto en AAP"
      ansible.controller.project:
        name: "{{ aap_project_name }}"
        organization: "{{ aap_organization }}"
        scm_type: "git"
        scm_url: "https://github.com/{{ github_user }}/{{ new_repo_name }}.git"
        credential: "{{ scm_credential.id }}"
        wait: true # Espera a que la primera sincronización del proyecto termine.
        state: present
        validate_certs: false

    - name: "Paso 8: Crear o Actualizar Webhook en GitHub"
      community.general.github_webhook:
        repository: "{{ github_user }}/{{ new_repo_name }}"
        user: "{{ github_user }}"
        token: "{{ github_token }}"
        url: "{{ webhook_url }}"
        content_type: "json"
        secret: "{{ webhook_key | default('') }}"
        events:
          - push
        insecure_ssl: true
      register: webhook_result
