# ---

# - name: Sign the content to be executed in AAP
#   hosts: localhost
#   gather_facts: false
#   tasks:
#     - name: Create gpg key to sign content
#       ansible.builtin.command: >
#         gpg --batch --passphrase '{{ gpg_passphrase }}' --quick-generate-key 'CI/CD <Runner>'

#     - name: Sign content
#       ansible.builtin.command: >
#         ansible-navigator sign --private-key /path/to/private/key /path/to/content
#       register: sign_result
#       ignore_errors: true
#       changed_when: false

#     - name: Display Sign Result
#       ansible.builtin.debug:
#         var: sign_result.stdout_lines


---
- name: Generar clave GPG automáticamente
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/main.yml
  vars:
    local_clone_path: "/tmp/{{ awx_webhook_payload.repository.name }}"
    source_repo_url: "{{ awx_webhook_payload.repository.clone_url }}"
  tasks:

    - name: Crear credencial GPG en AAP para firmar el contenido
      ansible.controller.credential:
        name: "{{ aap_project_name }} GPG"
        organization: "{{ aap_organization }}"
        credential_type: "GPG Public Key"
        inputs:
          gpg_public_key: "{{ lookup('file', '/home/runner/gpg/public_key.asc') }}"
        state: present
        validate_certs: false
      register: gpg_credential

    - name: Clone Git repository with playbooks
      ansible.builtin.git:
        repo: "{{ source_repo_url }}"
        dest: "{{ local_clone_path }}"
        force: true
      register: git_clone

    - name: Listar el contenido del directorio clonado
      ansible.builtin.command:
        cmd: ls -la {{ local_clone_path }}
      register: ls_result
      ignore_errors: true
      changed_when: false

    - name: Mostrar el contenido del directorio clonado
      ansible.builtin.debug:
        var: ls_result.stdout_lines

    - name: Firmar el contenido del repositorio clonado
      ansible.builtin.command:
        cmd: ansible-sign project gpg-sign {{ local_clone_path }}
      register: sign_result
      ignore_errors: true
      changed_when: false

    - name: Añadir clave pública al repositorio AAP
      ansible.controller.project:
        name: "{{ aap_project_name }}"
        organization: "{{ aap_organization }}"
        scm_type: "git"
        scm_url: "https://github.com/{{ github_user }}/{{ new_repo_name }}.git"
        credential: "{{ aap_scm_credential_name }}"
        signature_validation_credential: "{{ gpg_credential.name }}"
        wait: true # Espera a que la primera sincronización del proyecto termine.
        state: present
        validate_certs: false

